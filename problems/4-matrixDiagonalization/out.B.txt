Problem B:
Problem B.1:

Check the dependence by doing a fit to recorded times for 4x4 to 100x100 random matricies:
Linear fit to (log(n), log(time)) suggests that the dependence is O(n^2.9727)
Total function: log(time) = -9.61040421956548 + 2.97265530559495*log(n)
Hereby I conclude that the function is indeed O(n^3)


Problem B.2:
See problem B.3.


Problem B.3 and problem B.4:
See B3.comparison.svg to see a comparison of the runtime and rotations needed to find the lowest eigenvalue by value-by-value method, full diagonalization by value-by-value method and full cyclic method.
It does seem like my single value-by-value method is unstable in runtime, although I have not been able to figure out why. As shown ealier it does calculate the correct eigenvalues though. For this unintended instability, I have subtracted a point from my score.


Problem B.5:
Finding the largest eigenvalue of the matrix:

    0.854     0.120     0.897     0.966     0.086     0.019     0.052 
    0.120     0.586     0.654     0.375     0.619     0.713     0.845 
    0.897     0.654     0.412     0.028     0.878     0.185     0.516 
    0.966     0.375     0.028     0.447     0.268     0.628     0.572 
    0.086     0.619     0.878     0.268     0.576     0.876     0.231 
    0.019     0.713     0.185     0.628     0.876     0.084     0.062 
    0.052     0.845     0.516     0.572     0.231     0.062     0.320 

Largest found by cyclic jacobi:       3.26878745010883
Largest found by single row jacobi:   3.26878745010883

The single row method was changed by changing the calculation of the rotation angle theta to: 0.5*Atan2(-Apq, App-Aqq)
