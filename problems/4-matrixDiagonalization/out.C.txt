

Problem C:
Diagonalizing matrix A1 by classical jacobi:
A1 = 
    0.254     0.471     0.179     0.676     0.723 
    0.471     0.414     0.654     0.207     0.655 
    0.179     0.654     0.078     0.911     0.338 
    0.676     0.207     0.911     0.883     0.366 
    0.723     0.655     0.338     0.366     0.567 
Done in 52 rotations
A after diagonalization:
A1 = 
    0.254     0.000     0.000     0.000     0.000 
    0.471     0.414     0.000     0.000     0.000 
    0.179     0.654     0.078     0.000     0.000 
    0.676     0.207     0.911     0.883     0.000 
    0.723     0.655     0.338     0.366     0.567 
Found eigenvalues: -0.832676156 -0.348941422 0.167849634 0.662850694 2.545888947 
A1 in the eigenbasis:
V1^T * A1 * V1 = 
   -0.833     0.000     0.000     0.000     0.000 
    0.000    -0.349     0.000     0.000     0.000 
    0.000     0.000     0.168     0.000     0.000 
    0.000     0.000     0.000     0.663     0.000 
    0.000     0.000     0.000     0.000     2.546 


See C.comparison.svg for a comparison of rotations and time to diagonalizes matricies with the cyclic and classic jacobi method.
 It seems that the classic approach uses less rotations, but the two are about equal in computation time, due to the overhead of having to update the array of highest indexes.
